name: Brick Breaker with Flame
steps:
  - name: step_03
    steps:
      - name: Remove generated code
        rmdir: step_03
      - name: Create project
        flutter: create brick_breaker --empty
      - name: Configure analysis_options.yaml
        path: brick_breaker/analysis_options.yaml
        replace-contents: |
          include: ../../analysis_options.yaml

          linter:
            rules:
              avoid_print: false
      - name: Add dependencies
        path: brick_breaker
        flutter: pub add flame flutter_animate google_fonts
      - name: Remove README
        rm: brick_breaker/README.md
      - name: Add .vscode directory
        mkdir: brick_breaker/.vscode
      - name: Add .vscode/launch.json
        path: brick_breaker/.vscode/launch.json
        replace-contents: |
          {
              // Use IntelliSense to learn about possible attributes.
              // Hover to view descriptions of existing attributes.
              // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
              "version": "0.2.0",
              "configurations": [
                  {
                      "name": "brick_breaker",
                      "request": "launch",
                      "type": "dart"
                  }
              ]
          }
      - name: Replace lib/main.dart
        path: brick_breaker/lib/main.dart
        replace-contents: |
          import 'package:flame/game.dart';
          import 'package:flutter/widgets.dart';

          void main() {
            final game = FlameGame();
            runApp(GameWidget(game: game));
          }
      # - name: Build iOS simulator bundle
      #   platforms: [ macos ]
      #   path: brick_breaker
      #   flutter: build ios --simulator
      # - name: Build macOS app
      #   platforms: [ macos ]
      #   path: brick_breaker
      #   flutter: build macos
      # - name: Build Linux app
      #   platforms: [ linux ]
      #   path: brick_breaker
      #   flutter: build linux
      # - name: Build Windows app
      #   platforms: [ windows ]
      #   path: brick_breaker
      #   flutter: build windows
      - name: Copy step_03
        copydir:
          from: brick_breaker
          to: step_03
      - name: Flutter clean
        path: step_03
        flutter: clean
  - name: step_04
    steps:
      - name: Remove generated code
        rmdir: step_04
      - name: Patch lib/main.dart
        path: brick_breaker/lib/main.dart
        patch-u: |
          --- b/brick_breaker/step_04/lib/main.dart
          +++ a/brick_breaker/step_04/lib/main.dart
          @@ -1,7 +1,9 @@
           import 'package:flame/game.dart';
           import 'package:flutter/widgets.dart';
           
          +import 'src/brick_breaker.dart';
          +
           void main() {
          -  final game = FlameGame();
          +  final game = BrickBreaker();
             runApp(GameWidget(game: game));
           }
      - name: Mkdir lib/src
        mkdir: brick_breaker/lib/src
      - name: Add lib/src/brick_breaker.dart
        path: brick_breaker/lib/src/brick_breaker.dart
        replace-contents: |
          import 'dart:async';
          
          import 'package:flame/components.dart';
          import 'package:flame/game.dart';
          
          import 'components/components.dart';
          import 'config.dart';
          
          class BrickBreaker extends FlameGame {
            BrickBreaker()
                : super(
                      camera: CameraComponent.withFixedResolution(
                          width: gameWidth, height: gameHeight));
          
            @override
            FutureOr<void> onLoad() async {
              await super.onLoad();
          
              camera.viewfinder.position = Vector2(0, 0);
              camera.viewfinder.anchor = Anchor.topLeft;
          
              world.add(PlayArea());
            }
          }
      - name: Add lib/src/config.dart
        path: brick_breaker/lib/src/config.dart
        replace-contents: |
          const gameWidth = 820.0;
          const gameHeight = 1600.0;
      - name: Mkdir lib/src/components
        mkdir: brick_breaker/lib/src/components
      - name: Add lib/src/components/components.dart
        path: brick_breaker/lib/src/components/components.dart
        replace-contents: |
          export 'play_area.dart';
      - name: Add lib/src/components/play_area.dart
        path: brick_breaker/lib/src/components/play_area.dart
        replace-contents: |
          import 'package:flame/collisions.dart';
          import 'package:flame/components.dart';
          import 'package:flutter/material.dart';
          
          import '../config.dart';
          
          class PlayArea extends RectangleComponent {
            PlayArea()
                : super(
                      size: Vector2(gameWidth, gameHeight),
                      anchor: Anchor.topLeft,
                      paint: Paint()..color = const Color(0xfff2e8cf));
          
            @override
            onLoad() {
              super.onLoad();
              add(RectangleHitbox());
            }
          }
      - name: Copy step_04
        copydir:
          from: brick_breaker
          to: step_04
      - name: Flutter clean
        path: step_04
        flutter: clean
  - name: step_05
    steps:
      - name: Remove generated code
        rmdir: step_05
      - name: Patch lib/src/brick_breaker.dart
        path: brick_breaker/lib/src/brick_breaker.dart
        patch-u: |
          --- b/brick_breaker/step_05/lib/src/brick_breaker.dart
          +++ a/brick_breaker/step_05/lib/src/brick_breaker.dart
          @@ -1,4 +1,5 @@
           import 'dart:async';
          +import 'dart:math' as math;
           
           import 'package:flame/components.dart';
           import 'package:flame/game.dart';
          @@ -12,6 +13,8 @@ class BrickBreaker extends FlameGame {
                       camera: CameraComponent.withFixedResolution(
                           width: gameWidth, height: gameHeight));
           
          +  final rand = math.Random();
          +
             @override
             FutureOr<void> onLoad() async {
               await super.onLoad();
          @@ -20,5 +23,15 @@ class BrickBreaker extends FlameGame {
               camera.viewfinder.anchor = Anchor.topLeft;
           
               world.add(PlayArea());
          +
          +    final ball = Ball();
          +    ball.position = Vector2(gameWidth / 2, gameHeight / 2);
          +    ball.velocity.setValues(
          +      (rand.nextDouble() - 0.5) * gameWidth,
          +      gameHeight * 0.2,
          +    );
          +    world.add(ball);
          +
          +    debugMode = true;
             }
           }
      - name: Patch lib/src/config.dart
        path: brick_breaker/lib/src/config.dart
        patch-u: |
          --- b/brick_breaker/step_05/lib/src/config.dart
          +++ a/brick_breaker/step_05/lib/src/config.dart
          @@ -1,2 +1,3 @@
           const gameWidth = 820.0;
           const gameHeight = 1600.0;
          +const ballRadius = gameWidth * 0.02;
      - name: Patch lib/src/components/components.dart
        path: brick_breaker/lib/src/components/components.dart
        patch-u: |
          --- b/brick_breaker/step_05/lib/src/components/components.dart
          +++ a/brick_breaker/step_05/lib/src/components/components.dart
          @@ -1 +1,2 @@
          +export 'ball.dart';
           export 'play_area.dart';
      - name: Add lib/src/components/ball.dart
        path: brick_breaker/lib/src/components/ball.dart
        replace-contents: |
          import 'package:flame/collisions.dart';
          import 'package:flame/components.dart';
          import 'package:flutter/material.dart';
          
          import '../brick_breaker.dart';
          import '../config.dart';
          
          class Ball extends CircleComponent
              with CollisionCallbacks, HasGameRef<BrickBreaker> {
            Ball()
                : super(
                      radius: ballRadius,
                      anchor: Anchor.center,
                      paint: Paint()
                        ..color = const Color(0xff1e6091)
                        ..style = PaintingStyle.fill);
          
            final velocity = Vector2.zero();
          
            @override
            onLoad() async {
              await super.onLoad();
              add(CircleHitbox(radius: ballRadius));
            }
          
            @override
            void update(double dt) {
              super.update(dt);
              position += velocity * dt;
            }
          }
      - name: Copy step_05
        copydir:
          from: brick_breaker
          to: step_05
      - name: Flutter clean
        path: step_05
        flutter: clean
  - name: step_06
    steps:
      - name: Remove generated code
        rmdir: step_06
      - name: Patch lib/src/brick_breaker.dart
        path: brick_breaker/lib/src/brick_breaker.dart
        patch-u: |
          --- b/brick_breaker/step_06/lib/src/brick_breaker.dart
          +++ a/brick_breaker/step_06/lib/src/brick_breaker.dart
          @@ -7,7 +7,7 @@ import 'package:flame/game.dart';
           import 'components/components.dart';
           import 'config.dart';
           
          -class BrickBreaker extends FlameGame {
          +class BrickBreaker extends FlameGame with HasCollisionDetection {
             BrickBreaker()
                 : super(
                       camera: CameraComponent.withFixedResolution(
      - name: Patch lib/src/components/ball.dart
        path: brick_breaker/lib/src/components/ball.dart
        patch-u: |
          --- b/brick_breaker/step_06/lib/src/components/ball.dart
          +++ a/brick_breaker/step_06/lib/src/components/ball.dart
          @@ -4,6 +4,7 @@ import 'package:flutter/material.dart';
           
           import '../brick_breaker.dart';
           import '../config.dart';
          +import 'play_area.dart';
           
           class Ball extends CircleComponent
               with CollisionCallbacks, HasGameRef<BrickBreaker> {
          @@ -28,4 +29,23 @@ class Ball extends CircleComponent
               super.update(dt);
               position += velocity * dt;
             }
          +
          +  @override
          +  void onCollisionStart(
          +      Set<Vector2> intersectionPoints, PositionComponent other) {
          +    super.onCollisionStart(intersectionPoints, other);
          +    if (other is PlayArea) {
          +      if (intersectionPoints.first.y <= 0) {
          +        if (velocity.y < 0) velocity.y = -velocity.y;
          +      } else if (intersectionPoints.first.x <= 0) {
          +        if (velocity.x < 0) velocity.x = -velocity.x;
          +      } else if (intersectionPoints.first.x >= gameWidth) {
          +        if (velocity.x > 0) velocity.x = -velocity.x;
          +      } else if (intersectionPoints.first.y >= gameHeight) {
          +        game.world.remove(this);
          +      }
          +    } else {
          +      debugPrint('collision with $other');
          +    }
          +  }
           }
      - name: Copy step_06
        copydir:
          from: brick_breaker
          to: step_06
      - name: Flutter clean
        path: step_06
        flutter: clean
  - name: step_07
    steps:
      - name: Remove generated code
        rmdir: step_07
      - name: Patch lib/src/brick_breaker.dart
        path: brick_breaker/lib/src/brick_breaker.dart
        patch-u: |
          --- b/brick_breaker/step_07/lib/src/brick_breaker.dart
          +++ a/brick_breaker/step_07/lib/src/brick_breaker.dart
          @@ -2,12 +2,16 @@ import 'dart:async';
           import 'dart:math' as math;
           
           import 'package:flame/components.dart';
          +import 'package:flame/events.dart';
           import 'package:flame/game.dart';
          +import 'package:flutter/material.dart';
          +import 'package:flutter/services.dart';
           
           import 'components/components.dart';
           import 'config.dart';
           
          -class BrickBreaker extends FlameGame with HasCollisionDetection {
          +class BrickBreaker extends FlameGame
          +    with HasCollisionDetection, KeyboardEvents {
             BrickBreaker()
                 : super(
                       camera: CameraComponent.withFixedResolution(
          @@ -32,6 +36,23 @@ class BrickBreaker extends FlameGame with HasCollisionDetection {
               );
               world.add(ball);
           
          +    final bat = Bat();
          +    bat.position = Vector2(gameWidth / 2, gameHeight * 0.95);
          +    world.add(bat);
          +
               debugMode = true;
             }
          +
          +  @override
          +  KeyEventResult onKeyEvent(
          +      RawKeyEvent event, Set<LogicalKeyboardKey> keysPressed) {
          +    super.onKeyEvent(event, keysPressed);
          +    switch (event.logicalKey) {
          +      case LogicalKeyboardKey.arrowLeft:
          +        world.children.whereType<Bat>().first.moveBy(-batStep);
          +      case LogicalKeyboardKey.arrowRight:
          +        world.children.whereType<Bat>().first.moveBy(batStep);
          +    }
          +    return KeyEventResult.handled;
          +  }
           }
      - name: Patch lib/src/config.dart
        path: brick_breaker/lib/src/config.dart
        patch-u: |
          --- b/brick_breaker/step_07/lib/src/config.dart
          +++ a/brick_breaker/step_07/lib/src/config.dart
          @@ -1,3 +1,6 @@
           const gameWidth = 820.0;
           const gameHeight = 1600.0;
           const ballRadius = gameWidth * 0.02;
          +const batWidth = gameWidth * 0.2;
          +const batHeight = ballRadius * 2;
          +const batStep = gameWidth * 0.05;
      - name: Patch lib/src/components/ball.dart
        path: brick_breaker/lib/src/components/ball.dart
        patch-u: |
          --- b/brick_breaker/step_07/lib/src/components/ball.dart
          +++ a/brick_breaker/step_07/lib/src/components/ball.dart
          @@ -4,6 +4,7 @@ import 'package:flutter/material.dart';
           
           import '../brick_breaker.dart';
           import '../config.dart';
          +import 'bat.dart';
           import 'play_area.dart';
           
           class Ball extends CircleComponent
          @@ -44,6 +45,12 @@ class Ball extends CircleComponent
                 } else if (intersectionPoints.first.y >= gameHeight) {
                   game.world.remove(this);
                 }
          +    } else if (other is Bat) {
          +      if (velocity.y > 0) {
          +        velocity.y = -velocity.y;
          +        velocity.x = velocity.x +
          +            (position.x - other.position.x) / batWidth * gameWidth * 0.3;
          +      }
               } else {
                 debugPrint('collision with $other');
               }
      - name: Patch lib/src/components/components.dart
        path: brick_breaker/lib/src/components/components.dart
        patch-u: |
          --- b/brick_breaker/step_07/lib/src/components/components.dart
          +++ a/brick_breaker/step_07/lib/src/components/components.dart
          @@ -1,2 +1,3 @@
           export 'ball.dart';
          +export 'bat.dart';
           export 'play_area.dart';
      - name: Add lib/src/components/bat.dart
        path: brick_breaker/lib/src/components/bat.dart
        replace-contents: |
          import 'package:flame/collisions.dart';
          import 'package:flame/components.dart';
          import 'package:flame/effects.dart';
          import 'package:flame/events.dart';
          import 'package:flutter/material.dart';
          
          import '../brick_breaker.dart';
          import '../config.dart';
          
          class Bat extends PositionComponent
              with DragCallbacks, HasGameRef<BrickBreaker> {
            Bat() : super(size: Vector2(batWidth, batHeight), anchor: Anchor.center);
          
            final _paint = Paint()
              ..color = const Color(0xff1e6091)
              ..style = PaintingStyle.fill;
          
            @override
            onLoad() async {
              await super.onLoad();
              add(RectangleHitbox());
            }
          
            @override
            void render(Canvas canvas) {
              super.render(canvas);
              canvas.drawRRect(
                  RRect.fromRectAndRadius(
                    Offset.zero & size.toSize(),
                    const Radius.circular(ballRadius / 2),
                  ),
                  _paint);
            }
          
            @override
            void onDragUpdate(DragUpdateEvent event) {
              super.onDragUpdate(event);
              final cameraZoom = game.camera.viewfinder.zoom;
              var dx = (event.delta / cameraZoom).x;
              position.x =
                  (position.x + dx).clamp(batWidth / 2, gameWidth - batWidth / 2);
            }
          
            void moveBy(double dx) {
              add(MoveToEffect(
                Vector2(
                  (position.x + dx).clamp(batWidth / 2, gameWidth - batWidth / 2),
                  position.y,
                ),
                EffectController(duration: 0.1),
              ));
            }
          }
      - name: Copy step_07
        copydir:
          from: brick_breaker
          to: step_07
      - name: Flutter clean
        path: step_07
        flutter: clean
  - name: step_08
    steps:
      - name: Remove generated code
        rmdir: step_08
      - name: Patch lib/src/brick_breaker.dart
        path: brick_breaker/lib/src/brick_breaker.dart
        patch-u: |
          --- b/brick_breaker/step_08/lib/src/brick_breaker.dart
          +++ a/brick_breaker/step_08/lib/src/brick_breaker.dart
          @@ -40,7 +40,17 @@
               bat.position = Vector2(gameWidth / 2, gameHeight * 0.95);
               world.add(bat);
           
          -    debugMode = true;
          +    world.addAll([
          +      for (var i = 0; i < brickColors.length; i++)
          +        for (var j = 1; j <= 5; j++)
          +          Brick(
          +            Vector2(
          +              (i + 0.5) * brickWidth + (i + 1) * brickGutter,
          +              (j + 2.0) * brickHeight + j * brickGutter,
          +            ),
          +            brickColors[i],
          +          ),
          +    ]);
             }
           
             @override
      - name: Patch lib/src/config.dart
        path: brick_breaker/lib/src/config.dart
        patch-u: |
          --- b/brick_breaker/step_08/lib/src/config.dart
          +++ a/brick_breaker/step_08/lib/src/config.dart
          @@ -1,6 +1,26 @@
          +import 'package:flutter/material.dart';
          +
          +const brickColors = [
          +  Color(0xfff94144),
          +  Color(0xfff3722c),
          +  Color(0xfff8961e),
          +  Color(0xfff9844a),
          +  Color(0xfff9c74f),
          +  Color(0xff90be6d),
          +  Color(0xff43aa8b),
          +  Color(0xff4d908e),
          +  Color(0xff277da1),
          +  Color(0xff577590),
          +];
          +
           const gameWidth = 820.0;
           const gameHeight = 1600.0;
           const ballRadius = gameWidth * 0.02;
           const batWidth = gameWidth * 0.2;
           const batHeight = ballRadius * 2;
           const batStep = gameWidth * 0.05;
          +const brickGutter = gameWidth * 0.015;
          +final brickWidth =
          +    (gameWidth - (brickGutter * (brickColors.length + 1))) / brickColors.length;
          +const brickHeight = gameHeight * 0.03;
          +const difficultyModifier = 1.03;
      - name: Patch lib/src/components/ball.dart
        path: brick_breaker/lib/src/components/ball.dart
        patch-u: |
          --- b/brick_breaker/step_08/lib/src/components/ball.dart
          +++ a/brick_breaker/step_08/lib/src/components/ball.dart
          @@ -5,6 +5,7 @@ import 'package:flutter/material.dart';
           import '../brick_breaker.dart';
           import '../config.dart';
           import 'bat.dart';
          +import 'brick.dart';
           import 'play_area.dart';
           
           class Ball extends CircleComponent
          @@ -51,8 +52,17 @@ class Ball extends CircleComponent
                   velocity.x = velocity.x +
                       (position.x - other.position.x) / batWidth * gameWidth * 0.3;
                 }
          -    } else {
          -      debugPrint('collision with $other');
          +    } else if (other is Brick) {
          +      if (position.y < other.position.y - other.size.y / 2) {
          +        if (velocity.y > 0) velocity.y = -velocity.y;
          +      } else if (position.y > other.position.y + other.size.y / 2) {
          +        if (velocity.y < 0) velocity.y = -velocity.y;
          +      } else if (position.x < other.position.x) {
          +        if (velocity.x > 0) velocity.x = -velocity.x;
          +      } else if (position.x > other.position.x) {
          +        if (velocity.x < 0) velocity.x = -velocity.x;
          +      }
          +      velocity.setFrom(velocity * difficultyModifier);
               }
             }
           }
      - name: Patch lib/src/components/components.dart
        path: brick_breaker/lib/src/components/components.dart
        patch-u: |
          --- b/brick_breaker/step_08/lib/src/components/components.dart
          +++ a/brick_breaker/step_08/lib/src/components/components.dart
          @@ -1,3 +1,4 @@
           export 'ball.dart';
           export 'bat.dart';
          +export 'brick.dart';
           export 'play_area.dart';
      - name: Add lib/src/components/brick.dart
        path: brick_breaker/lib/src/components/brick.dart
        replace-contents: |
          import 'package:flame/collisions.dart';
          import 'package:flame/components.dart';
          import 'package:flutter/material.dart';
          
          import '../brick_breaker.dart';
          import '../config.dart';
          import 'ball.dart';
          import 'bat.dart';
          
          class Brick extends RectangleComponent
              with CollisionCallbacks, HasGameRef<BrickBreaker> {
            Brick(Vector2 position, Color color)
                : super(
                      position: position,
                      size: Vector2(brickWidth, brickHeight),
                      anchor: Anchor.center,
                      paint: Paint()
                        ..color = color
                        ..style = PaintingStyle.fill);
          
            @override
            onLoad() async {
              await super.onLoad();
              add(RectangleHitbox());
            }
          
            @override
            void onCollisionStart(
                Set<Vector2> intersectionPoints, PositionComponent other) {
              super.onCollisionStart(intersectionPoints, other);
              if (other is Ball) {
                game.world.remove(this);
          
                if (game.world.children.whereType<Brick>().length == 1) {
                  game.world.removeAll(game.world.children.whereType<Ball>());
                  game.world.removeAll(game.world.children.whereType<Bat>());
                }
              }
            }
          }
      - name: Copy step_08
        copydir:
          from: brick_breaker
          to: step_08
      - name: Flutter clean
        path: step_08
        flutter: clean
  - name: Cleanup
    rmdir: brick_breaker