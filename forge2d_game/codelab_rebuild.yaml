name: Forge2D Game rebuild script
steps:
  - name: step_03
    steps:
      - name: Remove generated code
        rmdir: step_03
      - name: Create project
        flutter: create --empty forge2d_game 
      - name: Make the macOS titlebar transparent, content full window, and hide the title bar.
        full-screen-macos-main-menu-xib: forge2d_game/macos/Runner/Base.lproj/MainMenu.xib
      - name: Strip DEVELOPMENT_TEAM
        strip-lines-containing: DEVELOPMENT_TEAM =
        path: forge2d_game/ios/Runner.xcodeproj/project.pbxproj
      - name: Configure analysis_options.yaml
        path: forge2d_game/analysis_options.yaml
        replace-contents: |
          include: ../../analysis_options.yaml
          
          analyzer:
            language:
              strict-inference: false
          
          linter:
            rules:
              prefer_const_constructors: false
              sort_pub_dependencies: true
      - name: Remove README
        rm: forge2d_game/README.md
      - name: Add .vscode directory
        mkdir: forge2d_game/.vscode
      - name: Add .vscode/launch.json
        path: forge2d_game/.vscode/launch.json
        replace-contents: |
          {
              // Use IntelliSense to learn about possible attributes.
              // Hover to view descriptions of existing attributes.
              // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
              "version": "0.2.0",
              "configurations": [
                  {
                      "name": "forge2d_game",
                      "request": "launch",
                      "type": "dart"
                  }
              ]
          }
      - name: Add dependencies
        path: forge2d_game
        flutter: pub add flame flame_forge2d
      - name: fix pubspec.yaml ordering
        path: forge2d_game/pubspec.yaml
        patch: |
          --- b/forge2d_game/step_03/pubspec.yaml
          +++ a/forge2d_game/step_03/pubspec.yaml
          @@ -13,9 +13,9 @@ dependencies:
               sdk: flutter
           
           dev_dependencies:
          +  flutter_lints: ^3.0.0
             flutter_test:
               sdk: flutter
          -  flutter_lints: ^3.0.0
           
           flutter:
             uses-material-design: true
      - name: Replace lib/main.dart
        path: forge2d_game/lib/main.dart
        replace-contents: |                    
          // Copyright 2024 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flame/game.dart';
          import 'package:flame_forge2d/flame_forge2d.dart';
          import 'package:flutter/material.dart';

          void main() {
            final game = Forge2DGame();
            runApp(GameWidget(game: game));
          }

      - name: Build iOS simulator bundle
        platforms: [ macos ]
        path: forge2d_game
        flutter: build ios --simulator
      - name: Build Android APK
        platforms: [ macos ]
        path: forge2d_game
        flutter: build apk
      - name: Build macOS app
        platforms: [ macos ]
        path: forge2d_game
        flutter: build macos
      - name: Build Linux app
        platforms: [ linux ]
        path: forge2d_game
        flutter: build linux
      - name: Build Windows app
        platforms: [ windows ]
        path: forge2d_game
        flutter: build windows
      - name: Copy step_03
        copydir:
          from: forge2d_game
          to: step_03
      - name: Flutter clean
        path: step_03
        flutter: clean
  - name: Cleanup
    rmdir: forge2d_game

  - name: step_13
    steps:
      - name: Remove generated code
        rmdir: step_13
      - name: Create project
        flutter: create --empty forge2d_game 
      - name: Make the macOS titlebar transparent, content full window, and hide the title bar.
        full-screen-macos-main-menu-xib: forge2d_game/macos/Runner/Base.lproj/MainMenu.xib
      - name: Strip DEVELOPMENT_TEAM
        strip-lines-containing: DEVELOPMENT_TEAM =
        path: forge2d_game/ios/Runner.xcodeproj/project.pbxproj
      - name: Configure analysis_options.yaml
        path: forge2d_game/analysis_options.yaml
        replace-contents: |
          include: ../../analysis_options.yaml
          
          analyzer:
            language:
              strict-inference: false
          
          linter:
            rules:
              prefer_const_constructors: false
              sort_pub_dependencies: true
      - name: Remove README
        rm: forge2d_game/README.md
      - name: Add .vscode directory
        mkdir: forge2d_game/.vscode
      - name: Add .vscode/launch.json
        path: forge2d_game/.vscode/launch.json
        replace-contents: |
          {
              // Use IntelliSense to learn about possible attributes.
              // Hover to view descriptions of existing attributes.
              // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
              "version": "0.2.0",
              "configurations": [
                  {
                      "name": "forge2d_game",
                      "request": "launch",
                      "type": "dart"
                  }
              ]
          }
      - name: Add dependencies
        path: forge2d_game
        flutter: pub add flame flame_forge2d
      - name: fix pubspec.yaml ordering
        path: forge2d_game/pubspec.yaml
        patch: |
          --- b/forge2d_game/step_13/pubspec.yaml
          +++ a/forge2d_game/step_13/pubspec.yaml
          @@ -13,9 +13,9 @@ dependencies:
               sdk: flutter
           
           dev_dependencies:
          +  flutter_lints: ^3.0.0
             flutter_test:
               sdk: flutter
          -  flutter_lints: ^3.0.0
           
           flutter:
             uses-material-design: true
      - name: Replace lib/main.dart
        path: forge2d_game/lib/main.dart
        replace-contents: |                    
          // Copyright 2024 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flame/components.dart';
          import 'package:flame/game.dart';
          import 'package:flame_forge2d/flame_forge2d.dart';
          import 'package:flutter/material.dart';

          void main() {
            runApp(
              MaterialApp(
                debugShowCheckedModeBanner: false,
                home: Scaffold(
                  body: GameWidget.controlled(
                    gameFactory: Forge2DExample.new,
                    loadingBuilder: (context) => Center(
                      child: CircularProgressIndicator(),
                    ),
                    errorBuilder: (context, error) => Center(
                      child: Text('Error: $error'),
                    ),
                  ),
                ),
              ),
            );
          }

          class Forge2DExample extends Forge2DGame {
            @override
            Future<void> onLoad() async {
              await super.onLoad();

              camera.viewport.add(
                BottomRightFpsTextComponent(),
              );
            }
          }

          class BottomRightFpsTextComponent extends FpsTextComponent {
            BottomRightFpsTextComponent() : super(anchor: Anchor.bottomRight);

            @override
            void onGameResize(Vector2 size) {
              super.onGameResize(size);
              position = size - Vector2(12, 10);
            }
          }
      - name: Build iOS simulator bundle
        platforms: [ macos ]
        path: forge2d_game
        flutter: build ios --simulator
      - name: Build Android APK
        platforms: [ macos ]
        path: forge2d_game
        flutter: build apk
      - name: Build macOS app
        platforms: [ macos ]
        path: forge2d_game
        flutter: build macos
      - name: Build Linux app
        platforms: [ linux ]
        path: forge2d_game
        flutter: build linux
      - name: Build Windows app
        platforms: [ windows ]
        path: forge2d_game
        flutter: build windows
      - name: Copy step_13
        copydir:
          from: forge2d_game
          to: step_13
      - name: Flutter clean
        path: step_13
        flutter: clean
  - name: step_14
    steps:
      - name: Remove generated code
        rmdir: step_14
      - name: Patch lib/main
        path: forge2d_game/lib/main.dart
        patch: |
          --- b/forge2d_game/step_14/lib/main.dart
          +++ a/forge2d_game/step_14/lib/main.dart
          @@ -3,6 +3,8 @@
           // found in the LICENSE file.
           
           import 'package:flame/components.dart';
          +import 'package:flame/events.dart';
          +import 'package:flame/extensions.dart';
           import 'package:flame/game.dart';
           import 'package:flame_forge2d/flame_forge2d.dart';
           import 'package:flutter/material.dart';
          @@ -34,6 +36,18 @@ class Forge2DExample extends Forge2DGame {
               camera.viewport.add(
                 BottomRightFpsTextComponent(),
               );
          +    world.add(Ball());
          +    await world.addAll(createBoundaries());
          +  }
          +
          +  List<Component> createBoundaries() =>
          +      [for (final position in WallPosition.values) Wall(position)];
          +
          +  @override
          +  void onGameResize(Vector2 size) {
          +    super.onGameResize(size);
          +    world.removeAll(world.children.whereType<Wall>());
          +    world.addAll(createBoundaries());
             }
           }
           
          @@ -46,3 +60,76 @@ class BottomRightFpsTextComponent extends FpsTextComponent {
               position = size - Vector2(12, 10);
             }
           }
          +
          +class Ball extends BodyComponent with TapCallbacks {
          +  Ball()
          +      : super(
          +          fixtureDefs: [
          +            FixtureDef(
          +              CircleShape()..radius = 5,
          +              restitution: 0.8,
          +              friction: 0.4,
          +            ),
          +          ],
          +          bodyDef: BodyDef(
          +            angularDamping: 0.8,
          +            position: Vector2.zero(),
          +            type: BodyType.dynamic,
          +          ),
          +        );
          +
          +  @override
          +  void onTapDown(event) {
          +    body.applyLinearImpulse(Vector2.random() * 5000);
          +  }
          +}
          +
          +enum WallPosition {
          +  top(label: 'Top'),
          +  right(label: 'Right'),
          +  bottom(label: 'Bottom'),
          +  left(label: 'Left');
          +
          +  final String label;
          +
          +  const WallPosition({required this.label});
          +}
          +
          +class Wall extends BodyComponent {
          +  final WallPosition wallPosition;
          +
          +  Wall(this.wallPosition) : super(bodyDef: BodyDef(position: Vector2.zero()));
          +
          +  @override
          +  Body createBody() {
          +    final visibleRect = game.camera.visibleWorldRect;
          +    final shape = switch (wallPosition) {
          +      WallPosition.top => EdgeShape()
          +        ..set(
          +          visibleRect.topLeft.toVector2(),
          +          visibleRect.topRight.toVector2(),
          +        ),
          +      WallPosition.right => EdgeShape()
          +        ..set(
          +          visibleRect.topRight.toVector2(),
          +          visibleRect.bottomRight.toVector2(),
          +        ),
          +      WallPosition.bottom => EdgeShape()
          +        ..set(
          +          visibleRect.bottomLeft.toVector2(),
          +          visibleRect.bottomRight.toVector2(),
          +        ),
          +      WallPosition.left => EdgeShape()
          +        ..set(
          +          visibleRect.topLeft.toVector2(),
          +          visibleRect.bottomLeft.toVector2(),
          +        ),
          +    };
          +    final fixtureDef = FixtureDef(shape, friction: 0.3);
          +    final bodyDef = BodyDef(
          +      position: Vector2.zero(),
          +    );
          +
          +    return world.createBody(bodyDef)..createFixture(fixtureDef);
          +  }
          +}
      - name: Copy step_14
        copydir:
          from: forge2d_game
          to: step_14
      - name: Flutter clean
        path: step_14
        flutter: clean
  - name: step_15
    steps:
      - name: Remove generated code
        rmdir: step_15
      - name: Add dependencies
        path: forge2d_game
        flutter: pub add riverpod flutter_riverpod flame_riverpod riverpod_annotation dev:riverpod_generator dev:build_runner dev:custom_lint dev:riverpod_lint
      - name: Patch analysis_options.yaml
        path: forge2d_game/analysis_options.yaml
        patch: |
          --- b/forge2d_game/step_15/analysis_options.yaml
          +++ a/forge2d_game/step_15/analysis_options.yaml
          @@ -3,6 +3,8 @@ include: ../../analysis_options.yaml
           analyzer:
             language:
               strict-inference: false
          +  plugins:
          +    - custom_lint
           
           linter:
             rules:
      - name: Add game.dart
        path: forge2d_game/lib/game.dart
        replace-contents: |
          // Copyright 2024 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flame/components.dart';
          import 'package:flame/events.dart';
          import 'package:flame/extensions.dart';
          import 'package:flame_forge2d/flame_forge2d.dart';
          import 'package:flame_riverpod/flame_riverpod.dart';

          import 'providers.dart';

          class Forge2DExample extends Forge2DGame with RiverpodGameMixin {
            @override
            Future<void> onLoad() async {
              await super.onLoad();

              await camera.viewport
                  .addAll([BottomRightFpsTextComponent(), TapCountComponent()]);
              world.add(Ball());
              await world.addAll(createBoundaries());
            }

            List<Component> createBoundaries() =>
                [for (final position in WallPosition.values) Wall(position)];

            @override
            void onGameResize(Vector2 size) {
              super.onGameResize(size);
              world.removeAll(world.children.whereType<Wall>());
              world.addAll(createBoundaries());
            }
          }

          class BottomRightFpsTextComponent extends FpsTextComponent {
            BottomRightFpsTextComponent() : super(anchor: Anchor.bottomRight);

            @override
            void onGameResize(Vector2 size) {
              super.onGameResize(size);
              position = size - Vector2(12, 10);
            }
          }

          class Ball extends BodyComponent with TapCallbacks, RiverpodComponentMixin {
            Ball()
                : super(
                    fixtureDefs: [
                      FixtureDef(
                        CircleShape()..radius = 5,
                        restitution: 0.8,
                        friction: 0.4,
                      ),
                    ],
                    bodyDef: BodyDef(
                      angularDamping: 0.8,
                      position: Vector2.zero(),
                      type: BodyType.dynamic,
                    ),
                  );

            @override
            void onTapDown(event) {
              ref.read(onTapProvider.notifier).increment();
              body.applyLinearImpulse(Vector2.random() * 5000);
            }
          }

          enum WallPosition {
            top(label: 'Top'),
            right(label: 'Right'),
            bottom(label: 'Bottom'),
            left(label: 'Left');

            final String label;

            const WallPosition({required this.label});
          }

          class Wall extends BodyComponent {
            final WallPosition wallPosition;

            Wall(this.wallPosition) : super(bodyDef: BodyDef(position: Vector2.zero()));

            @override
            Body createBody() {
              final visibleRect = game.camera.visibleWorldRect;
              final shape = switch (wallPosition) {
                WallPosition.top => EdgeShape()
                  ..set(
                    visibleRect.topLeft.toVector2(),
                    visibleRect.topRight.toVector2(),
                  ),
                WallPosition.right => EdgeShape()
                  ..set(
                    visibleRect.topRight.toVector2(),
                    visibleRect.bottomRight.toVector2(),
                  ),
                WallPosition.bottom => EdgeShape()
                  ..set(
                    visibleRect.bottomLeft.toVector2(),
                    visibleRect.bottomRight.toVector2(),
                  ),
                WallPosition.left => EdgeShape()
                  ..set(
                    visibleRect.topLeft.toVector2(),
                    visibleRect.bottomLeft.toVector2(),
                  ),
              };
              final fixtureDef = FixtureDef(shape, friction: 0.3);
              final bodyDef = BodyDef(
                position: Vector2.zero(),
              );

              return world.createBody(bodyDef)..createFixture(fixtureDef);
            }
          }

          class TapCountComponent extends PositionComponent
              with RiverpodComponentMixin, HasGameRef<Forge2DExample> {
            TextComponent? textComponent;
            int currentValue = 0;

            String get _description => 'Taps: $currentValue';

            @override
            void onMount() {
              addToGameWidgetBuild(() {
                ref.listen(onTapProvider, (prev, next) {
                  currentValue = next;
                  textComponent?.text = _description;
                });
              });
              super.onMount();
              add(textComponent = TextComponent(
                position: Vector2(game.size.x - 10, 10),
                anchor: Anchor.topRight,
                text: _description,
              ));
            }

            @override
            void onGameResize(Vector2 size) {
              super.onGameResize(size);
              textComponent?.position = Vector2(game.size.x - 10, 10);
            }
          }
      - name: Add providers.dart
        path: forge2d_game/lib/providers.dart
        replace-contents: |
          // Copyright 2024 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:riverpod_annotation/riverpod_annotation.dart';
          import 'game.dart';

          part 'providers.g.dart';

          /// The game instance.
          @riverpod
          Forge2DExample forge2dGame(Forge2dGameRef ref) => Forge2DExample();

          /// An on tap callback.
          @riverpod
          class OnTap extends _$OnTap {
            int _counter = 0;

            @override
            int build() => _counter;

            void increment() {
              _counter++;
              ref.invalidateSelf();
            }
          }
      - name: Patch main.dart
        path: forge2d_game/lib/main.dart
        patch: |
          --- b/forge2d_game/step_15/lib/main.dart
          +++ a/forge2d_game/step_15/lib/main.dart
          @@ -2,134 +2,43 @@
           // Use of this source code is governed by a BSD-style license that can be
           // found in the LICENSE file.
           
          -import 'package:flame/components.dart';
          -import 'package:flame/events.dart';
          -import 'package:flame/extensions.dart';
          -import 'package:flame/game.dart';
          -import 'package:flame_forge2d/flame_forge2d.dart';
          +import 'package:flame_riverpod/flame_riverpod.dart';
           import 'package:flutter/material.dart';
          +import 'package:flutter_riverpod/flutter_riverpod.dart';
          +
          +import 'game.dart';
          +import 'providers.dart';
           
           void main() {
             runApp(
          -    MaterialApp(
          +    ProviderScope(
          +        child: MaterialApp(
                 debugShowCheckedModeBanner: false,
                 home: Scaffold(
          -        body: GameWidget.controlled(
          -          gameFactory: Forge2DExample.new,
          -          loadingBuilder: (context) => Center(
          -            child: CircularProgressIndicator(),
          -          ),
          -          errorBuilder: (context, error) => Center(
          -            child: Text('Error: $error'),
          -          ),
          -        ),
          +        body: GameHolderWidget(),
                 ),
          -    ),
          +    )),
             );
           }
           
          -class Forge2DExample extends Forge2DGame {
          -  @override
          -  Future<void> onLoad() async {
          -    await super.onLoad();
          -
          -    camera.viewport.add(
          -      BottomRightFpsTextComponent(),
          -    );
          -    world.add(Ball());
          -    await world.addAll(createBoundaries());
          -  }
          -
          -  List<Component> createBoundaries() =>
          -      [for (final position in WallPosition.values) Wall(position)];
          -
          -  @override
          -  void onGameResize(Vector2 size) {
          -    super.onGameResize(size);
          -    world.removeAll(world.children.whereType<Wall>());
          -    world.addAll(createBoundaries());
          -  }
          -}
          -
          -class BottomRightFpsTextComponent extends FpsTextComponent {
          -  BottomRightFpsTextComponent() : super(anchor: Anchor.bottomRight);
          -
          -  @override
          -  void onGameResize(Vector2 size) {
          -    super.onGameResize(size);
          -    position = size - Vector2(12, 10);
          -  }
          -}
          -
          -class Ball extends BodyComponent with TapCallbacks {
          -  Ball()
          -      : super(
          -          fixtureDefs: [
          -            FixtureDef(
          -              CircleShape()..radius = 5,
          -              restitution: 0.8,
          -              friction: 0.4,
          -            ),
          -          ],
          -          bodyDef: BodyDef(
          -            angularDamping: 0.8,
          -            position: Vector2.zero(),
          -            type: BodyType.dynamic,
          -          ),
          -        );
          -
          -  @override
          -  void onTapDown(event) {
          -    body.applyLinearImpulse(Vector2.random() * 5000);
          -  }
          -}
          -
          -enum WallPosition {
          -  top(label: 'Top'),
          -  right(label: 'Right'),
          -  bottom(label: 'Bottom'),
          -  left(label: 'Left');
          +final key = GlobalKey<RiverpodAwareGameWidgetState<Forge2DExample>>(
          +    debugLabel: 'GameHolderWidgetKey');
           
          -  final String label;
          -
          -  const WallPosition({required this.label});
          -}
          -
          -class Wall extends BodyComponent {
          -  final WallPosition wallPosition;
          -
          -  Wall(this.wallPosition) : super(bodyDef: BodyDef(position: Vector2.zero()));
          +class GameHolderWidget extends ConsumerWidget {
          +  const GameHolderWidget({super.key});
           
             @override
          -  Body createBody() {
          -    final visibleRect = game.camera.visibleWorldRect;
          -    final shape = switch (wallPosition) {
          -      WallPosition.top => EdgeShape()
          -        ..set(
          -          visibleRect.topLeft.toVector2(),
          -          visibleRect.topRight.toVector2(),
          -        ),
          -      WallPosition.right => EdgeShape()
          -        ..set(
          -          visibleRect.topRight.toVector2(),
          -          visibleRect.bottomRight.toVector2(),
          -        ),
          -      WallPosition.bottom => EdgeShape()
          -        ..set(
          -          visibleRect.bottomLeft.toVector2(),
          -          visibleRect.bottomRight.toVector2(),
          -        ),
          -      WallPosition.left => EdgeShape()
          -        ..set(
          -          visibleRect.topLeft.toVector2(),
          -          visibleRect.bottomLeft.toVector2(),
          -        ),
          -    };
          -    final fixtureDef = FixtureDef(shape, friction: 0.3);
          -    final bodyDef = BodyDef(
          -      position: Vector2.zero(),
          +  Widget build(BuildContext context, WidgetRef ref) {
          +    final game = ref.watch(forge2dGameProvider);
          +    return RiverpodAwareGameWidget(
          +      game: game,
          +      loadingBuilder: (context) => Center(
          +        child: CircularProgressIndicator(),
          +      ),
          +      errorBuilder: (context, error) => Center(
          +        child: Text('Error: $error'),
          +      ),
          +      key: key,
               );
          -
          -    return world.createBody(bodyDef)..createFixture(fixtureDef);
             }
           }
      - name: Run build_runner
        path: forge2d_game
        dart: run build_runner build --delete-conflicting-outputs
      - name: Copy step_15
        copydir:
          from: forge2d_game
          to: step_15
      - name: Flutter clean
        path: step_15
        flutter: clean
  - name: step_16
    steps:
      - name: Remove generated code
        rmdir: step_16
      - name: Add dependencies
        path: forge2d_game
        flutter: pub add intl
      - name: Add lib/ticker_builder.dart
        path: forge2d_game/lib/ticker_builder.dart
        replace-contents: |
          // Copyright 2024 The Flutter Authors. All rights reserved.
          // Use of this source code is governed by a BSD-style license that can be
          // found in the LICENSE file.

          import 'package:flutter/material.dart';
          import 'package:flutter/scheduler.dart';

          /// A Builder widget that invokes its [builder] function on every animation frame.
          class TickerBuilder extends StatefulWidget {
            const TickerBuilder({super.key, required this.builder});
            final Widget Function(BuildContext context) builder;
            @override
            State<TickerBuilder> createState() => _TickerBuilderState();
          }

          class _TickerBuilderState extends State<TickerBuilder>
              with SingleTickerProviderStateMixin {
            late final Ticker _ticker;

            @override
            void initState() {
              super.initState();
              _ticker = createTicker(_handleTick)..start();
            }

            @override
            void dispose() {
              _ticker.dispose();
              super.dispose();
            }

            void _handleTick(Duration elapsed) {
              setState(() {
                // Force a rebuild without changing the widget tree.
              });
            }

            @override
            Widget build(BuildContext context) => widget.builder.call(context);
          }
      - name: Patch lib/main.dart
        path: forge2d_game/lib/main.dart
        patch: |
          --- a/forge2d_game/step_16/lib/main.dart
          +++ b/forge2d_game/step_16/lib/main.dart
          @@ -2,12 +2,15 @@
           // Use of this source code is governed by a BSD-style license that can be
           // found in the LICENSE file.
           
          +import 'package:flame_forge2d/flame_forge2d.dart';
           import 'package:flame_riverpod/flame_riverpod.dart';
           import 'package:flutter/material.dart';
           import 'package:flutter_riverpod/flutter_riverpod.dart';
          +import 'package:intl/intl.dart';
           
           import 'game.dart';
           import 'providers.dart';
          +import 'ticker_builder.dart';
           
           void main() {
             runApp(
          @@ -30,15 +33,71 @@ class GameHolderWidget extends ConsumerWidget {
             @override
             Widget build(BuildContext context, WidgetRef ref) {
               final game = ref.watch(forge2dGameProvider);
          -    return RiverpodAwareGameWidget(
          -      game: game,
          -      loadingBuilder: (context) => Center(
          -        child: CircularProgressIndicator(),
          -      ),
          -      errorBuilder: (context, error) => Center(
          -        child: Text('Error: $error'),
          +    return Row(
          +      children: [
          +        Expanded(
          +          child: RiverpodAwareGameWidget(
          +            game: game,
          +            loadingBuilder: (context) => Center(
          +              child: CircularProgressIndicator(),
          +            ),
          +            errorBuilder: (context, error) => Center(
          +              child: Text('Error: $error'),
          +            ),
          +            key: key,
          +          ),
          +        ),
          +        SizedBox(
          +          width: 350,
          +          child: GameComponentsList(),
          +        ),
          +      ],
          +    );
          +  }
          +}
          +
          +class GameComponentsList extends ConsumerWidget {
          +  const GameComponentsList({super.key});
          +
          +  @override
          +  Widget build(BuildContext context, WidgetRef ref) {
          +    final game = ref.watch(forge2dGameProvider);
          +    return TickerBuilder(
          +      builder: (context) => ListView(
          +        children: [
          +          for (final (index, ball)
          +              in game.world.children.whereType<Ball>().indexed)
          +            ListTile(
          +              title: Text('Ball ${index + 1}'),
          +              subtitle: Text('Position: ${ball.body.position.label}'),
          +            ),
          +          for (final wall in game.world.children.whereType<Wall>())
          +            _WallListTile(wall),
          +        ],
                 ),
          -      key: key,
          +    );
          +  }
          +}
          +
          +extension Vector2Label on Vector2 {
          +  String get label {
          +    final fmt = NumberFormat('##0.0#');
          +    return '(${fmt.format(x)}, ${fmt.format(y)})';
          +  }
          +}
          +
          +class _WallListTile extends StatelessWidget {
          +  const _WallListTile(this.wall);
          +  final Wall wall;
          +
          +  @override
          +  Widget build(BuildContext context) {
          +    final edgeShape = wall.body.fixtures.first.shape as EdgeShape;
          +
          +    return ListTile(
          +      title: Text('${wall.wallPosition.label} Wall'),
          +      subtitle: Text('Position: ${edgeShape.vertex1.label} '
          +          '${edgeShape.vertex2.label}'),
               );
             }
           }
      - name: Run build_runner
        path: forge2d_game
        dart: run build_runner build --delete-conflicting-outputs
      - name: Copy step_16
        copydir:
          from: forge2d_game
          to: step_16
      - name: Flutter clean
        path: step_16
        flutter: clean
  - name: step_17
    steps:
      - name: Remove generated code
        rmdir: step_17
      - name: Patch lib/providers.dart
        path: forge2d_game/lib/providers.dart
        patch: |
          --- a/forge2d_game/step_17/lib/providers.dart
          +++ b/forge2d_game/step_17/lib/providers.dart
          @@ -7,9 +7,19 @@ import 'game.dart';
           
           part 'providers.g.dart';
           
          -/// The game instance.
          +/// The resettable game instance.
           @riverpod
          -Forge2DExample forge2dGame(Forge2dGameRef ref) => Forge2DExample();
          +class Forge2dGame extends _$Forge2dGame {
          +  var _game = Forge2DExample();
          +
          +  @override
          +  Forge2DExample build() => _game;
          +
          +  void reset() {
          +    _game = Forge2DExample();
          +    ref.invalidateSelf();
          +  }
          +}
           
           /// An on tap callback.
           @riverpod
          @@ -24,3 +34,22 @@ class OnTap extends _$OnTap {
               ref.invalidateSelf();
             }
           }
          +
          +/// The number of balls to have on screen
          +@riverpod
          +class BallCount extends _$BallCount {
          +  int _count = 1;
          +
          +  @override
          +  int build() => _count;
          +
          +  addBall() {
          +    _count++;
          +    ref.invalidateSelf();
          +  }
          +
          +  removeBall() {
          +    _count--;
          +    ref.invalidateSelf();
          +  }
          +}
      - name: Patch lib/game.dart
        path: forge2d_game/lib/game.dart
        patch: |
          --- a/forge2d_game/step_17/lib/game.dart
          +++ b/forge2d_game/step_17/lib/game.dart
          @@ -24,6 +24,21 @@ class Forge2DExample extends Forge2DGame with RiverpodGameMixin {
             List<Component> createBoundaries() =>
                 [for (final position in WallPosition.values) Wall(position)];
           
          +  @override
          +  void onMount() {
          +    super.onMount();
          +    addToGameWidgetBuild(() {
          +      ref.listen(ballCountProvider, (prev, next) {
          +        var diff = world.children.whereType<Ball>().length.compareTo(next);
          +        if (diff < 0) {
          +          world.add(Ball());
          +        } else if (diff > 0) {
          +          world.children.whereType<Ball>().firstOrNull?.removeFromParent();
          +        }
          +      });
          +    });
          +  }
          +
             @override
             void onGameResize(Vector2 size) {
               super.onGameResize(size);
      - name: Patch lib/main.dart
        path: forge2d_game/lib/main.dart
        patch: |
          --- a/forge2d_game/step_17/lib/main.dart
          +++ b/forge2d_game/step_17/lib/main.dart
          @@ -65,6 +65,35 @@ class GameComponentsList extends ConsumerWidget {
               return TickerBuilder(
                 builder: (context) => ListView(
                   children: [
          +          ListTile(
          +            title: Center(
          +              child: Row(mainAxisSize: MainAxisSize.min, children: [
          +                ElevatedButton(
          +                  child: Text('Add ball'),
          +                  onPressed: () =>
          +                      ref.read(ballCountProvider.notifier).addBall(),
          +                ),
          +
          +                SizedBox(width: 16), // Add some space between the buttons
          +                ElevatedButton(
          +                  onPressed: switch (ref.read(ballCountProvider)) {
          +                    0 => null,
          +                    _ => () =>
          +                        ref.read(ballCountProvider.notifier).removeBall(),
          +                  },
          +                  child: Text('Remove ball'),
          +                ),
          +              ]),
          +            ),
          +          ),
          +          ListTile(
          +            title: Center(
          +              child: ElevatedButton(
          +                child: Text('Reset Game'),
          +                onPressed: () => ref.read(forge2dGameProvider.notifier).reset(),
          +              ),
          +            ),
          +          ),
                     for (final (index, ball)
                         in game.world.children.whereType<Ball>().indexed)
                       ListTile(
      - name: Run build_runner
        path: forge2d_game
        dart: run build_runner build --delete-conflicting-outputs
      - name: Copy step_17
        copydir:
          from: forge2d_game
          to: step_17
      - name: Flutter clean
        path: step_17
        flutter: clean
  - name: Cleanup
    rmdir: forge2d_game
