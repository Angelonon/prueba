name: Foreign Function Interface codelab rebuild script
steps:
  - name: step_03
    steps:
      - name: Remove generated code.
        rmdir: step_03
      - name: Create project.
        flutter: create --template=plugin_ffi --platforms=android,ios,linux,macos,windows msfa_plugin
      - name: Configure analysis_options.yaml
        path: msfa_plugin/analysis_options.yaml
        replace-contents: |
          include: ../../analysis_options.yaml
      - name: Remove CHANGELOG
        rm: msfa_plugin/CHANGELOG.md
      - name: Remove LICENSE
        rm: msfa_plugin/LICENSE
      - name: Remove README
        rm: msfa_plugin/README.md
      - name: Add .vscode directory
        mkdir: msfa_plugin/.vscode
      - name: Add .vscode/launch.json
        path: msfa_plugin/.vscode/launch.json
        replace-contents: |
          {
              // Use IntelliSense to learn about possible attributes.
              // Hover to view descriptions of existing attributes.
              // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
              "version": "0.2.0",
              "configurations": [
                  {
                      "name": "example",
                      "cwd": "example",
                      "request": "launch",
                      "type": "dart"
                  }
              ]
          }
      - name: dart format
        dart: format msfa_plugin
      - name: dart fix
        dart: fix --apply msfa_plugin
      - name: Fixup example/lib/main.dart
        path: msfa_plugin/example/lib/main.dart
        patch-u: |
          --- b/ffi_codelab/step_03/example/lib/main.dart
          +++ a/ffi_codelab/step_03/example/lib/main.dart
          @@ -11,10 +11,10 @@ class MyApp extends StatefulWidget {
             const MyApp({super.key});
           
             @override
          -  _MyAppState createState() => _MyAppState();
          +  MyAppState createState() => MyAppState();
           }
           
          -class _MyAppState extends State<MyApp> {
          +class MyAppState extends State<MyApp> {
             late int sumResult;
             late Future<int> sumAsyncResult;
      - name: Build iOS simulator bundle
        path: msfa_plugin/example
        platforms: [ macos ]
        flutter: build ios --simulator
      - name: Build macOS app
        path: msfa_plugin/example
        platforms: [ macos ]
        flutter: build macos
      - name: Copy step_03
        copydir:
          from: msfa_plugin
          to: step_03
  - name: step_05
    steps:
      - name: Remove generated code.
        rmdir: step_05
      - name: git clone libmsfa
        path: msfa_plugin/src
        git: clone https://github.com/maks/libmsfa
      - name: git checkout libmsfa tag v1.0.0
        path: msfa_plugin/src/libmsfa
        git: checkout v1.0.0
      - name: Git ignore src/libmsfa
        path: msfa_plugin/src/.gitignore
        replace-contents: |
          /libmsfa/
      - name: Patch analysis_options.yaml
        path: msfa_plugin/analysis_options.yaml
        patch-u: |
          --- b/ffi_codelab/step_05/analysis_options.yaml
          +++ a/ffi_codelab/step_05/analysis_options.yaml
          @@ -1 +1,5 @@
           include: ../../analysis_options.yaml
          +
          +analyzer:
          +   exclude:
          +    - lib/*bindings_generated.dart
      - name: Patch ffigen.yaml
        path: msfa_plugin/ffigen.yaml
        patch-u: |
          --- b/ffi_codelab/step_05/ffigen.yaml
          +++ a/ffi_codelab/step_05/ffigen.yaml
          @@ -7,9 +7,9 @@ description: |
           output: 'lib/msfa_plugin_bindings_generated.dart'
           headers:
             entry-points:
          -    - 'src/msfa_plugin.h'
          +    - 'src/libmsfa/include/libmsfa.h'
             include-directives:
          -    - 'src/msfa_plugin.h'
          +    - 'src/libmsfa/include/libmsfa.h'
           preamble: |
             // ignore_for_file: always_specify_types
             // ignore_for_file: camel_case_types
          @@ -17,3 +17,10 @@ preamble: |
           comments:
             style: any
             length: full
          +llvm-path:
          +    - "/usr/lib/llvm-15"
          +functions:  
          +  symbol-address:
          +      # Used to expose symbol address.
          +      include:
          +        - shutdownEngine
      - name: Run ffigen
        path: msfa_plugin
        platforms: [ linux ]
        flutter: pub run ffigen --config ffigen.yaml
      - name: Replace lib/msfa_plugin_bindings_generated.dart
        path: msfa_plugin/lib/msfa_plugin_bindings_generated.dart
        platforms: 
          - macos
          - windows
        replace-contents: |
          // ignore_for_file: always_specify_types
          // ignore_for_file: camel_case_types
          // ignore_for_file: non_constant_identifier_names
          
          // AUTO GENERATED FILE, DO NOT EDIT.
          //
          // Generated by `package:ffigen`.
          import 'dart:ffi' as ffi;
          
          /// Bindings for `src/msfa_plugin.h`.
          ///
          /// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
          ///
          class MsfaPluginBindings {
            /// Holds the symbol lookup function.
            final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
                _lookup;
          
            /// The symbols are looked up in [dynamicLibrary].
            MsfaPluginBindings(ffi.DynamicLibrary dynamicLibrary)
                : _lookup = dynamicLibrary.lookup;
          
            /// The symbols are looked up with [lookup].
            MsfaPluginBindings.fromLookup(
                ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
                    lookup)
                : _lookup = lookup;
          
            int initEngine() {
              return _initEngine();
            }
          
            late final _initEnginePtr =
                _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('initEngine');
            late final _initEngine = _initEnginePtr.asFunction<int Function()>();
          
            void sendMidi(
              ffi.Pointer<ffi.Uint8> bytes,
              int size,
            ) {
              return _sendMidi(
                bytes,
                size,
              );
            }
          
            late final _sendMidiPtr = _lookup<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int)>>('sendMidi');
            late final _sendMidi =
                _sendMidiPtr.asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();
          
            void shutdownEngine() {
              return _shutdownEngine();
            }
          
            late final _shutdownEnginePtr =
                _lookup<ffi.NativeFunction<ffi.Void Function()>>('shutdownEngine');
            late final _shutdownEngine = _shutdownEnginePtr.asFunction<void Function()>();
          
            late final addresses = _SymbolAddresses(this);
          }
          
          class _SymbolAddresses {
            final MsfaPluginBindings _library;
            _SymbolAddresses(this._library);
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> get shutdownEngine =>
                _library._shutdownEnginePtr;
          }
          
          abstract class msfa_result {
            static const int MSFA_SUCCESS = 0;
          
            /// A generic error.
            static const int MSFA_ERROR = -1;
            static const int MSFA_AUDIO_OPEN_FAILED = -2;
            static const int MSFA_AUDIO_START_FAILED = -2;
          }

      - name: Patch example/lib/main.dart
        path: msfa_plugin/example/lib/main.dart
        patch-u: |
          --- b/ffi_codelab/step_05/example/lib/main.dart
          +++ a/ffi_codelab/step_05/example/lib/main.dart
          @@ -15,14 +15,10 @@ class MyApp extends StatefulWidget {
           }
           
           class MyAppState extends State<MyApp> {
          -  late int sumResult;
          -  late Future<int> sumAsyncResult;
          -
             @override
             void initState() {
               super.initState();
          -    sumResult = msfa_plugin.sum(1, 2);
          -    sumAsyncResult = msfa_plugin.sumAsync(3, 4);
          +    msfa_plugin.init();
             }
           
             @override
          @@ -40,30 +36,19 @@ class MyAppState extends State<MyApp> {
                       child: Column(
                         children: [
                           const Text(
          -                  'This calls a native function through FFI that is shipped as source in the package. '
          -                  'The native code is built as part of the Flutter Runner build.',
          -                  style: textStyle,
          -                  textAlign: TextAlign.center,
          -                ),
          -                spacerSmall,
          -                Text(
          -                  'sum(1, 2) = $sumResult',
          +                  'Initialized libmsfa',
                             style: textStyle,
                             textAlign: TextAlign.center,
                           ),
                           spacerSmall,
          -                FutureBuilder<int>(
          -                  future: sumAsyncResult,
          -                  builder: (BuildContext context, AsyncSnapshot<int> value) {
          -                    final displayValue =
          -                        (value.hasData) ? value.data : 'loading';
          -                    return Text(
          -                      'await sumAsync(3, 4) = $displayValue',
          -                      style: textStyle,
          -                      textAlign: TextAlign.center,
          -                    );
          -                  },
          -                ),
          +                MaterialButton(
          +                    child: const Text("send midi"),
          +                    onPressed: () async {
          +                      debugPrint("send midi");
          +                      msfa_plugin.sendMidi([0x90, 0x4c, 0x57]);
          +                      await Future.delayed(const Duration(seconds: 1));
          +                      msfa_plugin.sendMidi([0x90, 0x4c, 0x00]);
          +                    })
                         ],
                       ),
                     ),
      - name: Replace lib/msfa_plugin.dart
        path: msfa_plugin/lib/msfa_plugin.dart
        replace-contents: |
          import 'dart:ffi';
          import 'dart:io';
          import 'package:ffi/ffi.dart' as ffi;
          
          import 'msfa_plugin_bindings_generated.dart';
          
          void init() => _bindings.initEngine();
          
          void sendMidi(List<int> list) {
            Pointer<Uint8> buf = ffi.malloc.allocate(list.length);
            for (int i = 0; i < list.length; i++) {
              buf[i] = list[i];
            }
            _bindings.sendMidi(buf, list.length);
            ffi.malloc.free(buf);
          }
          
          const String _libName = 'msfa_plugin';
          
          /// The dynamic library in which the symbols for [LibmsfaPluginBindings] can be found.
          final DynamicLibrary _dylib = () {
            if (Platform.isMacOS || Platform.isIOS) {
              return DynamicLibrary.open('$_libName.framework/$_libName');
            }
            if (Platform.isAndroid || Platform.isLinux) {
              return DynamicLibrary.open('lib$_libName.so');
            }
            if (Platform.isWindows) {
              return DynamicLibrary.open('$_libName.dll');
            }
            throw UnsupportedError('Unknown platform: ${Platform.operatingSystem}');
          }();
          
          /// The bindings to the native functions in [_dylib].
          final MsfaPluginBindings _bindings = MsfaPluginBindings(_dylib);
      - name: Remove src/msfa_plugin.c
        rm: msfa_plugin/src/msfa_plugin.c
      - name: Replace src/msfa_plugin.h
        path: msfa_plugin/src/msfa_plugin.h
        replace-contents: |
          #ifndef __LIBMSFA_H
          #define __LIBMSFA_H
          
          #include <stdint.h>
          
          typedef enum
          {
              MSFA_SUCCESS  =  0,
              MSFA_ERROR    = -1,  /* A generic error. */
              MSFA_AUDIO_OPEN_FAILED = -2,
              MSFA_AUDIO_START_FAILED = -2,
          } msfa_result;
          
          #ifdef __cplusplus
          extern "C" {
          #endif
              msfa_result initEngine();
              void sendMidi(const uint8_t *bytes, int size);
              void shutdownEngine();
          #ifdef __cplusplus    
          }
          #endif
          
          #endif  // __LIBMSFA_H
      - name: Patch src/CMakeLists.txt
        path: msfa_plugin/src/CMakeLists.txt
        patch-u: |
          --- b/ffi_codelab/step_05/src/CMakeLists.txt
          +++ a/ffi_codelab/step_05/src/CMakeLists.txt
          @@ -3,10 +3,28 @@
           # the plugin to fail to compile for some customers of the plugin.
           cmake_minimum_required(VERSION 3.10)
           
          -project(msfa_plugin_library VERSION 0.0.1 LANGUAGES C)
          +project(msfa_plugin_library VERSION 0.0.1 LANGUAGES C CXX)
           
           add_library(msfa_plugin SHARED
          -  "msfa_plugin.c"
          +
          +  # Provides a relative path to your source file(s).
          +  libmsfa/src/dx7note.cc
          +  libmsfa/src/env.cc
          +  libmsfa/src/exp2.cc
          +  libmsfa/src/fir.cc
          +  libmsfa/src/fm_core.cc
          +  libmsfa/src/fm_op_kernel.cc
          +  libmsfa/src/freqlut.cc
          +  libmsfa/src/lfo.cc
          +  libmsfa/src/log2.cc
          +  libmsfa/src/libmsfa.cc
          +  libmsfa/src/patch.cc
          +  libmsfa/src/pitchenv.cc
          +  libmsfa/src/resofilter.cc
          +  libmsfa/src/ringbuffer.cc
          +  libmsfa/src/sawtooth.cc
          +  libmsfa/src/sin.cc
          +  libmsfa/src/synth_unit.cc
           )
           
           set_target_properties(msfa_plugin PROPERTIES
          @@ -14,4 +32,15 @@ set_target_properties(msfa_plugin PROPERTIES
             OUTPUT_NAME "msfa_plugin"
           )
           
          -target_compile_definitions(msfa_plugin PUBLIC DART_SHARED_LIB)
          +target_compile_options(msfa_plugin PRIVATE -Wno-c++11-narrowing)
          +
          +set(CMAKE_CXX_FLAGS -pthread)
          +
          +include_directories("include")
          +
          +target_link_libraries(
          +
          +  # Specifies the target library.
          +  msfa_plugin
          +  ${CMAKE_DL_LIBS}
          +)
      - name: Upgrade dep versions
        path: msfa_plugin
        flutter: pub upgrade --major-versions
      - name: Move ffi dep from dev_deps to deps
        path: msfa_plugin
        flutter: pub add ffi
      - name: Copy step_05
        copydir:
          from: msfa_plugin
          to: step_05
  - name: step_06
    steps:
      - name: Remove generated code.
        rmdir: step_06
      - name: Remove ios/Classes/msfa_plugin.c
        rm: msfa_plugin/ios/Classes/msfa_plugin.c
      - name: Copy libmsfa to ios/Classes
        path: msfa_plugin
        copydir:
          from: src/libmsfa/src
          to: ios/Classes
      - name: Mkdir ios/include
        path: msfa_plugin
        mkdir: ios/include
      - name: Copy include files
        path: msfa_plugin
        copydir:
          from: src/libmsfa/include
          to: ios/include
      - name: Patch ios/msfa_plugin.podspec
        path: msfa_plugin/ios/msfa_plugin.podspec
        patch-u: |
          --- b/ffi_codelab/step_06/ios/msfa_plugin.podspec
          +++ a/ffi_codelab/step_06/ios/msfa_plugin.podspec
          @@ -18,7 +18,26 @@ A new Flutter FFI plugin project.
             # paths, so Classes contains a forwarder C file that relatively imports
             # `../src/*` so that the C sources can be shared among all target platforms.
             s.source           = { :path => '.' }
          -  s.source_files = 'Classes/**/*'
          +  s.source_files     = [
          +    'Classes/dx7note.cc',
          +    'Classes/env.cc',
          +    'Classes/exp2.cc',
          +    'Classes/fir.cc',
          +    'Classes/fm_core.cc',
          +    'Classes/fm_op_kernel.cc',
          +    'Classes/freqlut.cc',
          +    'Classes/lfo.cc',
          +    'Classes/log2.cc',
          +    'Classes/libmsfa.mm',
          +    'Classes/patch.cc',
          +    'Classes/pitchenv.cc',
          +    'Classes/resofilter.cc',
          +    'Classes/ringbuffer.cc',
          +    'Classes/sawtooth.cc',
          +    'Classes/sin.cc',
          +    'Classes/synth_unit.cc'   
          +    ]
          +  s.frameworks       = 'AVFoundation', 'AudioToolbox'  
             s.dependency 'Flutter'
             s.platform = :ios, '9.0'
      - name: Remove ios/Classes/core.gyp
        path: msfa_plugin
        rm: ios/Classes/core.gyp
      - name: Rename ios/Classes/libmsfa.cc to ios/Classes/libmsfa.mm
        path: msfa_plugin/ios/Classes
        rename:
          from: libmsfa.cc
          to: libmsfa.mm
      - name: Remove ios/Classes/neon_fir.s
        rm: msfa_plugin/ios/Classes/neon_fir.s
      - name: Remove ios/Classes/neon_fm_kernel.s
        rm: msfa_plugin/ios/Classes/neon_fm_kernel.s
      - name: Remove ios/Classes/neon_iir.s
        rm: msfa_plugin/ios/Classes/neon_iir.s
      - name: Remove ios/Classes/neon_ladder.s
        rm: msfa_plugin/ios/Classes/neon_ladder.s
      - name: Remove macos/Classes/msfa_plugin.c
        rm: msfa_plugin/macos/Classes/msfa_plugin.c
      - name: Copy libmsfa to macos/Classes
        path: msfa_plugin
        copydir:
          from: src/libmsfa/src
          to: macos/Classes
      - name: Mkdir macos/include
        path: msfa_plugin
        mkdir: macos/include
      - name: Copy include files
        path: msfa_plugin
        copydir:
          from: src/libmsfa/include
          to: macos/include
      - name: Patch macos/msfa_plugin.podspec
        path: msfa_plugin/macos/msfa_plugin.podspec
        patch-u: |
          --- b/ffi_codelab/step_06/macos/msfa_plugin.podspec
          +++ a/ffi_codelab/step_06/macos/msfa_plugin.podspec
          @@ -18,7 +18,26 @@ A new Flutter FFI plugin project.
             # paths, so Classes contains a forwarder C file that relatively imports
             # `../src/*` so that the C sources can be shared among all target platforms.
             s.source           = { :path => '.' }
          -  s.source_files     = 'Classes/**/*'
          +  s.source_files     = [
          +    'Classes/dx7note.cc',
          +    'Classes/env.cc',
          +    'Classes/exp2.cc',
          +    'Classes/fir.cc',
          +    'Classes/fm_core.cc',
          +    'Classes/fm_op_kernel.cc',
          +    'Classes/freqlut.cc',
          +    'Classes/lfo.cc',
          +    'Classes/log2.cc',
          +    'Classes/libmsfa.cc',
          +    'Classes/patch.cc',
          +    'Classes/pitchenv.cc',
          +    'Classes/resofilter.cc',
          +    'Classes/ringbuffer.cc',
          +    'Classes/sawtooth.cc',
          +    'Classes/sin.cc',
          +    'Classes/synth_unit.cc'   
          +    ] 
          +
             s.dependency 'FlutterMacOS'
           
             s.platform = :osx, '10.11'
      - name: Remove macos/Classes/neon_fir.s
        rm: msfa_plugin/macos/Classes/neon_fir.s
      - name: Remove macos/Classes/neon_fm_kernel.s
        rm: msfa_plugin/macos/Classes/neon_fm_kernel.s
      - name: Remove macos/Classes/neon_iir.s
        rm: msfa_plugin/macos/Classes/neon_iir.s
      - name: Remove macos/Classes/neon_ladder.s
        rm: msfa_plugin/macos/Classes/neon_ladder.s
      - name: Remove macos/Classes/core.gyp
        path: msfa_plugin
        rm: macos/Classes/core.gyp
      - name: Copy step_06
        copydir:
          from: msfa_plugin
          to: step_06
  - name: complete
    steps:
      - name: Remove generated code.
        rmdir: complete
      - name: Add flutter_virtual_piano
        path: msfa_plugin/example
        flutter: pub add flutter_virtual_piano
      - name: mkdir example/test
        mkdir: msfa_plugin/example/test
      - name: Add example/test/widget_test.dart
        path: msfa_plugin/example/test/widget_test.dart
        replace-contents: |
          import 'package:flutter_test/flutter_test.dart';
          import 'package:msfa_plugin_example/main.dart';
          
          void main() {
            testWidgets('example app shows loading message', (WidgetTester tester) async {
              await tester.pumpWidget(
                const MyApp(),
              );
          
              // check for expected progress message
              final initMessage = find.text('MSFA Engine Init: loading...');
              expect(initMessage, findsOneWidget);
            });
          }
      - name: Replace msfa_plugin.dart
        path: msfa_plugin/lib/msfa_plugin.dart
        replace-contents: |
          import 'dart:async';
          import 'dart:ffi';
          import 'dart:io';
          import 'dart:isolate';
          import 'package:ffi/ffi.dart' as ffi;
          
          import 'msfa_plugin_bindings_generated.dart';
          
          const String _libName = 'msfa_plugin';
          
          /// The bindings to the native functions in [_dylib].
          MsfaPluginBindings get _bindings => MsfaPluginBindings(_dylib);
          
          /// The dynamic library in which the symbols for [MsfaPluginBindings] can be found.
          final DynamicLibrary _dylib = () {
            if (Platform.isMacOS || Platform.isIOS) {
              return DynamicLibrary.open('$_libName.framework/$_libName');
            }
            if (Platform.isAndroid || Platform.isLinux) {
              return DynamicLibrary.open('lib$_libName.so');
            }
            if (Platform.isWindows) {
              return DynamicLibrary.open('$_libName.dll');
            }
            throw UnsupportedError('Unknown platform: ${Platform.operatingSystem}');
          }();
          
          class MSFAPlugin implements Finalizable {
            static final _finalizer =
                NativeFinalizer(_bindings.addresses.shutdownEngine.cast());
          
            /// Used to prevent double close and usage after close.
            bool _shutdown = false;
          
            Future<bool> init() async {
              final SendPort helperIsolateSendPort = await _helperIsolateSendPort;
              final request = _InitRequest();
              final completer = Completer<bool>();
              _initRequest = completer;
              helperIsolateSendPort.send(request);
              return completer.future;
            }
          
            void sendMidi(List<int> list) {
              Pointer<Uint8> buf = ffi.malloc.allocate(list.length);
              for (int i = 0; i < list.length; i++) {
                buf[i] = list[i];
              }
              _bindings.sendMidi(buf, list.length);
              ffi.malloc.free(buf);
            }
          
            void shutDown() {
              if (_shutdown) {
                return;
              }
              _shutdown = true;
              _finalizer.detach(this);
              _bindings.shutdownEngine();
            }
          
            void shutDownIsolate() {}
          }
          
          /// A request to Init the MSFA Engine
          class _InitRequest {}
          
          Completer<bool>? _initRequest;
          
          /// The SendPort belonging to the helper isolate.
          Future<SendPort> _helperIsolateSendPort = () async {
            // The helper isolate is going to send us back a SendPort, which we want to
            // wait for.
            final Completer<SendPort> completer = Completer<SendPort>();
          
            // Receive port on the main isolate to receive messages from the helper.
            // We receive two types of messages:
            // 1. A port to send messages on.
            // 2. Responses to requests we sent.
            final ReceivePort receivePort = ReceivePort()
              ..listen((final dynamic data) {
                if (data is SendPort) {
                  // The helper isolate sent us the port on which we can sent it requests.
                  completer.complete(data);
                  return;
                }
                if (data is bool) {
                  // The helper isolate sent us a response to a request we sent.
                  final completer = _initRequest;
                  _initRequest = null;
                  completer?.complete(data);
                  return;
                }
                throw UnsupportedError('Unsupported message type: ${data.runtimeType}');
              });
          
            // Start the helper isolate.
            await Isolate.spawn((sendPort) async {
              final ReceivePort helperReceivePort = ReceivePort()
                ..listen((dynamic data) {
                  // On the helper isolate listen to requests and respond to them.
                  if (data is _InitRequest) {
                    _bindings.initEngine();
                    sendPort.send(true);
                    // ignore: avoid_print
                    print('exiting Helper Isolate');
                    Isolate.exit();
                  }
                  throw UnsupportedError('Unsupported message type: ${data.runtimeType}');
                });
          
              // Send the the port to the main isolate on which we can receive requests.
              sendPort.send(helperReceivePort.sendPort);
            }, receivePort.sendPort);
          
            // Wait until the helper isolate has sent us back the SendPort on which we
            // can start sending requests.
            return completer.future;
          }();
      - name: Replace example/main.dart
        path: msfa_plugin/example/lib/main.dart
        replace-contents: |
          import 'package:flutter/material.dart';
          
          import 'package:flutter_virtual_piano/flutter_virtual_piano.dart';
          import 'package:msfa_plugin/msfa_plugin.dart';
          
          void main() {
            runApp(const MyApp());
          }
          
          class MyApp extends StatefulWidget {
            const MyApp({Key? key}) : super(key: key);
          
            @override
            MyAppState createState() => MyAppState();
          }
          
          class MyAppState extends State<MyApp> {
            late MSFAPlugin plugin;
          
            @override
            void initState() {
              super.initState();
              plugin = MSFAPlugin();
            }
          
            @override
            void reassemble() {
              super.reassemble();
              debugPrint("reassembling state...");
              plugin.shutDown();
              plugin = MSFAPlugin();
            }
          
            @override
            void dispose() {
              super.dispose();
            }
          
            void sendNoteOn(int noteNumber, int velocity) {
              debugPrint("send note on: $noteNumber");
              // Midi messages: [Status, NoteNumber, Velocity]
              // where status is 0x90-0x9F and the low nibble is the channel number 0-15
              // ref: http://midi.teragonaudio.com/tech/midispec/noteon.htm
              plugin.sendMidi([0x90, noteNumber, velocity]);
            }
          
            void sendNoteOff(int noteNumber) {
              debugPrint("send note off: $noteNumber");
              plugin.sendMidi([0x80, noteNumber, 0x00]);
            }
          
            @override
            Widget build(BuildContext context) {
              const textStyle = TextStyle(fontSize: 25);
              const spacerSmall = SizedBox(height: 10);
              return MaterialApp(
                home: Scaffold(
                  appBar: AppBar(
                    title: const Text('Native Packages'),
                  ),
                  body: SingleChildScrollView(
                    child: Container(
                      padding: const EdgeInsets.all(10),
                      child: Column(
                        children: [
                          spacerSmall,
                          FutureBuilder<bool>(
                            future: plugin.init(),
                            builder: (BuildContext context, AsyncSnapshot<bool> value) {
                              final displayValue = (value.hasData)
                                  ? (value.data == true ? "completed" : "failed")
                                  : 'loading...';
                              return Text(
                                'MSFA Engine Init: $displayValue',
                                style: textStyle,
                                textAlign: TextAlign.center,
                              );
                            },
                          ),
                          MaterialButton(
                            child: const Text("shutdown"),
                            onPressed: () async {
                              debugPrint("shutdown engine");
                              plugin.shutDown();
                            },
                          ),
                          SizedBox(
                            height: 120,
                            child: VirtualPiano(
                              noteRange: const RangeValues(52, 71),
                              onNotePressed: (note, pos) {
                                sendNoteOn(note, 0x57);
                              },
                              onNoteReleased: (note) {
                                sendNoteOff(note);
                              },
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              );
            }
          }
      - name: Copy complete
        copydir:
          from: msfa_plugin
          to: complete
  - name: Cleanup
    rmdir: msfa_plugin
