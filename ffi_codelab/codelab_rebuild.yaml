name: Foreign Function Interface codelab rebuild script
steps:
  - name: step_03
    steps:
      - name: Remove generated code.
        rmdir: step_03
      - name: Create project.
        flutter: create --template=plugin_ffi --platforms=android,ios,linux,macos,windows msfa_plugin
      - name: Configure analysis_options.yaml
        path: msfa_plugin/analysis_options.yaml
        replace-contents: |
          include: ../../analysis_options.yaml
      - name: Remove CHANGELOG
        rm: msfa_plugin/CHANGELOG.md
      - name: Remove LICENSE
        rm: msfa_plugin/LICENSE
      - name: Remove README
        rm: msfa_plugin/README.md
      - name: Add .vscode directory
        mkdir: msfa_plugin/.vscode
      - name: Add .vscode/launch.json
        path: msfa_plugin/.vscode/launch.json
        replace-contents: |
          {
              // Use IntelliSense to learn about possible attributes.
              // Hover to view descriptions of existing attributes.
              // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
              "version": "0.2.0",
              "configurations": [
                  {
                      "name": "example",
                      "cwd": "example",
                      "request": "launch",
                      "type": "dart"
                  }
              ]
          }
      - name: dart format
        dart: format msfa_plugin
      - name: dart fix
        dart: fix --apply msfa_plugin
      - name: Fixup example/lib/main.dart
        path: msfa_plugin/example/lib/main.dart
        patch-u: |
          --- b/ffi_codelab/step_03/example/lib/main.dart
          +++ a/ffi_codelab/step_03/example/lib/main.dart
          @@ -11,10 +11,10 @@ class MyApp extends StatefulWidget {
             const MyApp({super.key});
           
             @override
          -  _MyAppState createState() => _MyAppState();
          +  MyAppState createState() => MyAppState();
           }
           
          -class _MyAppState extends State<MyApp> {
          +class MyAppState extends State<MyApp> {
             late int sumResult;
             late Future<int> sumAsyncResult;
      - name: Build iOS simulator bundle
        path: msfa_plugin/example
        platforms: [ macos ]
        flutter: build ios --simulator
      - name: Build macOS app
        path: msfa_plugin/example
        platforms: [ macos ]
        flutter: build macos
      - name: Copy step_03
        copydir:
          from: msfa_plugin
          to: step_03
  - name: step_05
    steps:
      - name: Remove generated code.
        rmdir: step_05
      - name: git clone libmsfa
        path: msfa_plugin/src
        git: clone https://github.com/maks/libmsfa
      - name: git checkout libmsfa tag v1.0.0
        path: msfa_plugin/src/libmsfa
        git: checkout v1.0.0
      - name: Git ignore src/libmsfa
        path: msfa_plugin/src/.gitignore
        replace-contents: |
          /libmsfa/
      - name: Patch analysis_options.yaml
        path: msfa_plugin/analysis_options.yaml
        patch-u: |
          --- b/ffi_codelab/step_05/analysis_options.yaml
          +++ a/ffi_codelab/step_05/analysis_options.yaml
          @@ -1 +1,5 @@
           include: ../../analysis_options.yaml
          +
          +analyzer:
          +   exclude:
          +    - lib/*bindings_generated.dart
      - name: Patch ffigen.yaml
        path: msfa_plugin/ffigen.yaml
        patch-u: |
          --- b/ffi_codelab/step_05/ffigen.yaml
          +++ a/ffi_codelab/step_05/ffigen.yaml
          @@ -7,9 +7,9 @@ description: |
           output: 'lib/msfa_plugin_bindings_generated.dart'
           headers:
             entry-points:
          -    - 'src/msfa_plugin.h'
          +    - 'src/libmsfa/include/libmsfa.h'
             include-directives:
          -    - 'src/msfa_plugin.h'
          +    - 'src/libmsfa/include/libmsfa.h'
           preamble: |
             // ignore_for_file: always_specify_types
             // ignore_for_file: camel_case_types
          @@ -17,3 +17,12 @@ preamble: |
           comments:
             style: any
             length: full
          +llvm-path:
          +    - "/usr/lib/llvm-15"
          +functions:  
          +  symbol-address:
          +      # Used to expose symbol address.
          +      include:
          +        - shutdownEngine
          +
          +
      - name: Run ffigen
        path: msfa_plugin
        flutter: pub run ffigen --config ffigen.yaml
      - name: Patch example/lib/main.dart
        path: msfa_plugin/example/lib/main.dart
        patch-u: |
          --- b/ffi_codelab/step_05/example/lib/main.dart
          +++ a/ffi_codelab/step_05/example/lib/main.dart
          @@ -15,14 +15,10 @@ class MyApp extends StatefulWidget {
           }
           
           class MyAppState extends State<MyApp> {
          -  late int sumResult;
          -  late Future<int> sumAsyncResult;
          -
             @override
             void initState() {
               super.initState();
          -    sumResult = msfa_plugin.sum(1, 2);
          -    sumAsyncResult = msfa_plugin.sumAsync(3, 4);
          +    msfa_plugin.init();
             }
           
             @override
          @@ -40,30 +36,19 @@ class MyAppState extends State<MyApp> {
                       child: Column(
                         children: [
                           const Text(
          -                  'This calls a native function through FFI that is shipped as source in the package. '
          -                  'The native code is built as part of the Flutter Runner build.',
          -                  style: textStyle,
          -                  textAlign: TextAlign.center,
          -                ),
          -                spacerSmall,
          -                Text(
          -                  'sum(1, 2) = $sumResult',
          +                  'Initialized libmsfa',
                             style: textStyle,
                             textAlign: TextAlign.center,
                           ),
                           spacerSmall,
          -                FutureBuilder<int>(
          -                  future: sumAsyncResult,
          -                  builder: (BuildContext context, AsyncSnapshot<int> value) {
          -                    final displayValue =
          -                        (value.hasData) ? value.data : 'loading';
          -                    return Text(
          -                      'await sumAsync(3, 4) = $displayValue',
          -                      style: textStyle,
          -                      textAlign: TextAlign.center,
          -                    );
          -                  },
          -                ),
          +                MaterialButton(
          +                    child: const Text("send midi"),
          +                    onPressed: () async {
          +                      debugPrint("send midi");
          +                      msfa_plugin.sendMidi([0x90, 0x4c, 0x57]);
          +                      await Future.delayed(const Duration(seconds: 1));
          +                      msfa_plugin.sendMidi([0x90, 0x4c, 0x00]);
          +                    })
                         ],
                       ),
                     ),
      - name: Replace lib/msfa_plugin.dart
        path: msfa_plugin/lib/msfa_plugin.dart
        replace-contents: |
          import 'dart:ffi';
          import 'dart:io';
          import 'package:ffi/ffi.dart' as ffi;
          
          import 'msfa_plugin_bindings_generated.dart';
          
          void init() => _bindings.initEngine();
          
          void sendMidi(List<int> list) {
            Pointer<Uint8> buf = ffi.malloc.allocate(list.length);
            for (int i = 0; i < list.length; i++) {
              buf[i] = list[i];
            }
            _bindings.sendMidi(buf, list.length);
            ffi.malloc.free(buf);
          }
          
          const String _libName = 'msfa_plugin';
          
          /// The dynamic library in which the symbols for [LibmsfaPluginBindings] can be found.
          final DynamicLibrary _dylib = () {
            if (Platform.isMacOS || Platform.isIOS) {
              return DynamicLibrary.open('$_libName.framework/$_libName');
            }
            if (Platform.isAndroid || Platform.isLinux) {
              return DynamicLibrary.open('lib$_libName.so');
            }
            if (Platform.isWindows) {
              return DynamicLibrary.open('$_libName.dll');
            }
            throw UnsupportedError('Unknown platform: ${Platform.operatingSystem}');
          }();
          
          /// The bindings to the native functions in [_dylib].
          final MsfaPluginBindings _bindings = MsfaPluginBindings(_dylib);
      - name: Remove src/msfa_plugin.c
        rm: msfa_plugin/src/msfa_plugin.c
      - name: Replace src/msfa_plugin.h
        path: msfa_plugin/src/msfa_plugin.h
        replace-contents: |
          #ifndef __LIBMSFA_H
          #define __LIBMSFA_H
          
          #include <stdint.h>
          
          typedef enum
          {
              MSFA_SUCCESS  =  0,
              MSFA_ERROR    = -1,  /* A generic error. */
              MSFA_AUDIO_OPEN_FAILED = -2,
              MSFA_AUDIO_START_FAILED = -2,
          } msfa_result;
          
          #ifdef __cplusplus
          extern "C" {
          #endif
              msfa_result initEngine();
              void sendMidi(const uint8_t *bytes, int size);
              void shutdownEngine();
          #ifdef __cplusplus    
          }
          #endif
          
          #endif  // __LIBMSFA_H
      - name: Patch src/CMakeLists.txt
        path: msfa_plugin/src/CMakeLists.txt
        patch-u: |
          --- b/ffi_codelab/step_05/src/CMakeLists.txt
          +++ a/ffi_codelab/step_05/src/CMakeLists.txt
          @@ -3,10 +3,28 @@
           # the plugin to fail to compile for some customers of the plugin.
           cmake_minimum_required(VERSION 3.10)
           
          -project(msfa_plugin_library VERSION 0.0.1 LANGUAGES C)
          +project(msfa_plugin_library VERSION 0.0.1 LANGUAGES C CXX)
           
           add_library(msfa_plugin SHARED
          -  "msfa_plugin.c"
          +
          +  # Provides a relative path to your source file(s).
          +  libmsfa/src/dx7note.cc
          +  libmsfa/src/env.cc
          +  libmsfa/src/exp2.cc
          +  libmsfa/src/fir.cc
          +  libmsfa/src/fm_core.cc
          +  libmsfa/src/fm_op_kernel.cc
          +  libmsfa/src/freqlut.cc
          +  libmsfa/src/lfo.cc
          +  libmsfa/src/log2.cc
          +  libmsfa/src/libmsfa.cc
          +  libmsfa/src/patch.cc
          +  libmsfa/src/pitchenv.cc
          +  libmsfa/src/resofilter.cc
          +  libmsfa/src/ringbuffer.cc
          +  libmsfa/src/sawtooth.cc
          +  libmsfa/src/sin.cc
          +  libmsfa/src/synth_unit.cc  
           )
           
           set_target_properties(msfa_plugin PROPERTIES
          @@ -14,4 +32,16 @@ set_target_properties(msfa_plugin PROPERTIES
             OUTPUT_NAME "msfa_plugin"
           )
           
          -target_compile_definitions(msfa_plugin PUBLIC DART_SHARED_LIB)
          +target_compile_options(msfa_plugin PRIVATE -Wno-c++11-narrowing)
          +
          +set(CMAKE_CXX_FLAGS -pthread)
          +
          +include_directories("include")
          +
          +target_link_libraries(
          +
          +  # Specifies the target library.
          +  msfa_plugin
          +  ${CMAKE_DL_LIBS}
          +)
          +
      - name: Upgrade dep versions
        path: msfa_plugin
        flutter: pub upgrade --major-versions
      - name: Move ffi dep from dev_deps to deps
        path: msfa_plugin
        flutter: pub add ffi
      - name: Copy step_05
        copydir:
          from: msfa_plugin
          to: step_05
  - name: Cleanup
    rmdir: msfa_plugin
